#!/usr/bin/env python3
"""
Terminal Souls: AI-Orchestrated Psychological Horror Roguelike
Where every choice feeds the Entity's understanding of your soul.
"""

import os
import time
import random
from typing import Dict, List, Any, Optional

from player import Player
from entity_ai import EntityAI
from combat import Combat
from room import RoomManager
from npc import NPCManager
from utils import (
    music_manager, ui_distorter, narrator_filter, input_manager,
    colorize_text, create_ascii_border, format_stats_display, 
    format_ending_screen, save_whisper_archive, clear_screen,
    press_enter_to_continue, wobble_text
)

class Game:
    """Main game controller with EntityAI orchestration"""
    
    def __init__(self):
        self.player = None
        self.entity_ai = EntityAI()
        self.combat = None
        self.room_manager = None
        self.npc_manager = None
        self.game_active = True
        self.current_floor = 1
        
        # Game state
        self.in_combat = False
        self.current_room = None
        self.floor_boss_defeated = False
        
    def show_intro(self):
        """Display game introduction with Entity's voice"""
        clear_screen()
        
        intro_text = f"""
{create_ascii_border("TERMINAL SOULS", "═")}

{colorize_text("The Entity compiles your fate.", context="lore")}
{colorize_text("Every choice feeds its understanding.", context="lore")}
{colorize_text("Every death trains its algorithms.", context="lore")}
{colorize_text("Your patterns are data. Your soul, the dataset.", context="lore")}

{colorize_text("Type 'help' at startup for tutorial", "cyan")}
{colorize_text("Type 'exit' in safe areas to end gracefully", "yellow")}

{colorize_text("WARNING:", "red")}
{colorize_text("The Entity adapts—predictability will kill you.", "yellow")}
{colorize_text("No saves. No mercy. Only descent.", "yellow")}

{colorize_text("If Terminal Souls corrupts your brain in the best way:", "cyan")}
{colorize_text("Fuel the descent: https://buymeacoffee.com/amariahak", "yellow")}
        """
        
        print(intro_text)
        
        # Check for help request
        response = input(f"\n{colorize_text('Press Enter to begin, or type \"help\" for tutorial:', 'white')} ").strip().lower()
        if response == "help":
            self.show_comprehensive_help()
    
    def show_comprehensive_help(self):
        """Show comprehensive help/tutorial system"""
        clear_screen()
        print(f"{create_ascii_border('TERMINAL SOULS - SURVIVAL GUIDE', '═')}")
        
        help_sections = [
            ("Game Flow", self.help_game_flow),
            ("Turn-Based Combat", self.help_combat),
            ("Stats & Leveling", self.help_stats), 
            ("Inventory & Equipment", self.help_inventory),
            ("NPCs & Dialogue", self.help_npcs),
            ("The Entity's Adaptive AI", self.help_entity),
            ("Safe vs Hostile Zones", self.help_zones),
            ("Death & Progression", self.help_death),
            ("Advanced Tips", self.help_advanced)
        ]
        
        while True:
            print(f"\n{colorize_text('Choose a topic to learn about:', 'cyan')}")
            for i, (name, _) in enumerate(help_sections):
                print(f"  {i+1}. {colorize_text(name, 'white')}")
            print(f"  0. {colorize_text('Exit Tutorial', 'yellow')}")
            
            try:
                choice = int(input(f"\n{colorize_text('Select topic (0-9):', 'white')} ")) - 1
                
                if choice == -1:  # 0 selected
                    print(f"\n{colorize_text('Tutorial complete. The descent awaits...', 'cyan')}")
                    press_enter_to_continue()
                    return
                elif 0 <= choice < len(help_sections):
                    clear_screen()
                    help_sections[choice][1]()
                    press_enter_to_continue("\nPress Enter to return to tutorial menu...")
                    clear_screen()
                    print(f"{create_ascii_border('TERMINAL SOULS - SURVIVAL GUIDE', '═')}")
                else:
                    print(f"{colorize_text('Invalid choice.', 'red')}")
                    
            except ValueError:
                print(f"{colorize_text('Please enter a number.', 'red')}")
    
    def help_game_flow(self):
        """Help section: Game Flow"""
        print(f"{colorize_text('═══ GAME FLOW ═══', 'cyan')}")
        print(f"""
{colorize_text('Chapter Structure:', 'yellow')}
• Each run consists of 9 chapters generated by the Entity's AI
• Chapter types: Safe, Combat, Shop, Miniboss, Boss
• The sequence changes every death—no two runs are the same

{colorize_text('Safe vs Hostile Areas:', 'yellow')}
• Safe areas: No timer, can type 'exit' to end game gracefully
• Hostile areas: The Entity denies escape ("The descent binds you")
• NPCs only appear in safe areas

{colorize_text('Progression:', 'yellow')}  
• Floors 1-5 each have unique themes and challenges
• Between chapters: Read lore calmly, no rushing
• EntityAI generates dynamic content based on your playstyle
        """)
    
    def help_combat(self):
        """Help section: Turn-Based Combat"""
        print(f"{colorize_text('═══ TURN-BASED COMBAT ═══', 'cyan')}")
        print(f"""
{colorize_text('Combat Flow:', 'yellow')}
1. Enemy shows planned action with threat level
2. You choose response: Attack, Dodge, Heal, Special, Flee
3. Effectiveness rating shows how good your choice is
4. Both actions execute, turn results shown

{colorize_text('Actions:', 'yellow')}
• Attack (A): Deal damage based on STR + weapon
• Dodge (D): Avoid damage, DEX affects success rate  
• Heal (H): Restore HP using Ashlight (costs vary by END)
• Special (S): Class-specific abilities with unique effects
• Flee (F): Escape chance based on DEX (bosses may block)

{colorize_text('Boss Encounters:', 'yellow')}
• Multiple phases announced ("Phase Two begins...")
• Special abilities unlock as health decreases
• Clear feedback on what's happening each turn
        """)
    
    def help_stats(self):
        """Help section: Stats & Leveling"""
        print(f"{colorize_text('═══ STATS & LEVELING ═══', 'cyan')}")
        print(f"""
{colorize_text('Core Stats (and their dark truths):', 'yellow')}
• STR: Melee damage → {colorize_text('Entity spawns armored enemies', 'red')}
• DEX: Dodge chance, accuracy → {colorize_text('Mobs use feints & traps', 'red')}
• INT: Magic damage → {colorize_text('Magic-dampening enemies appear', 'red')}
• FTH: Divine power → {colorize_text('Faith-corrupting mobs target you', 'red')}
• END: Stamina, heal cost → {colorize_text('Stamina-draining attacks increase', 'red')}
• VIT: HP, defense → {colorize_text('Poison and DoT effects intensify', 'red')}

{colorize_text('Leveling:', 'yellow')}
• Souls-like scaling: Each level costs more Ashlight
• 10 Ashlight per stat point initially
• Costs increase as stats grow higher
• Healing never restores full HP—always partial

{colorize_text('Warning:', 'red')}
{colorize_text('Stats are not numbers. They are shackles. Choose wisely.', context='lore')}
        """)
    
    def help_inventory(self):
        """Help section: Inventory & Equipment"""  
        print(f"{colorize_text('═══ INVENTORY & EQUIPMENT ═══', 'cyan')}")
        print(f"""
{colorize_text('Inventory System:', 'yellow')}
• Two tabs: "Bag" (all items) and "Equipped" (current gear)
• Equipment slots: Head, Chest, Arms, Legs, Boots, Weapon, Rings, Necklace  
• Only 3 buff items can be equipped at once (prevents OP builds)
• Items show full details: name, lore, buffs/debuffs, price

{colorize_text('Item Quality:', 'yellow')}
• Buffs are modest but impactful (+5% dodge, small crit bonus)
• Some items have curse risks—power at a price
• All items disappear on death (Souls-style punishment)
• EntityAI generates items that tempt your weaknesses

{colorize_text('Equipment Strategy:', 'yellow')}
• Balance offensive and defensive items
• Consider curse risks vs benefits
• Some items have lore that reveals secrets
        """)
    
    def help_npcs(self):
        """Help section: NPCs & Dialogue"""
        print(f"{colorize_text('═══ NPCS & DIALOGUE ═══', 'cyan')}")
        print(f"""
{colorize_text('Dialogue System:', 'yellow')}
• Branching conversations with multiple response choices  
• Your responses affect NPC relationships and future interactions
• High trust = better prices, help in crises
• Betrayal = NPCs vanish, then reappear as hostile bosses

{colorize_text('Relationship Web:', 'yellow')}
• NPCs have allies and enemies among themselves
• Helping one may hurt your standing with their enemies
• Complex web of interconnected relationships
• Three possible endings based on your choices:
  - Betrayer ending, Neutral ending, Good ending

{colorize_text('Key NPCs:', 'yellow')}
• Lorekeeper: Sells knowledge and lore fragments
• Blacktongue: Weapon enhancement and upgrades  
• Ash Sister: Riddles and wisdom
• Faceless Merchant: General goods and supplies
• Still Flame Warden: Skill training and advancement
• The Hollowed: Mysterious, remembers past runs
        """)
    
    def help_entity(self):
        """Help section: The Entity's Adaptive AI"""
        print(f"{colorize_text('═══ THE ENTITY\'S ADAPTIVE AI ═══', 'cyan')}")
        print(f"""
{colorize_text('How the Entity Learns:', 'red')}
• Tracks your action patterns and predictability score
• High predictability = harder enemies, overpriced shops  
• Adapts faster with each death, remembers your habits
• Uses PyTorch neural networks (inference only, no training)

{colorize_text('Adaptive Counters:', 'red')}
• STR builds → High-armor, dodge-heavy mobs
• DEX builds → Feinting enemies, trap-heavy areas
• Magic builds → Anti-magic fields, spell corruption
• Predictable players → Direct Entity intervention

{colorize_text('Fighting Back:', 'yellow')}
• Vary your action patterns—entropy is your friend
• Neural Veil skill: Adds noise to confuse the AI
• Low predictability gives you small advantages
• Chaos Mode (10+ deaths): AI outputs become corrupted

{colorize_text('The Entity Speaks:', context='lore')}
{colorize_text('"Your patterns are trivial to compile."', context='lore')}
        """)
    
    def help_zones(self):
        """Help section: Safe vs Hostile Zones"""
        print(f"{colorize_text('═══ SAFE VS HOSTILE ZONES ═══', 'cyan')}")
        print(f"""
{colorize_text('Safe Areas:', 'green')}
• No time pressure—think and plan carefully
• Can type 'exit' to end game gracefully  
• NPCs available for dialogue and trading
• Inventory management without stress
• Lore reading between chapters

{colorize_text('Hostile Areas:', 'red')}
• Entity denies exit: "The descent binds you—no escape here"
• Combat encounters and dangerous exploration
• Time pressure during dangerous decisions
• No NPCs—you face the Entity alone

{colorize_text('Transition Warnings:', 'yellow')}
• Game clearly indicates when entering hostile zones
• Safe areas are havens—use them strategically
• Some areas shift between safe/hostile based on your actions
        """)
    
    def help_death(self):
        """Help section: Death & Progression"""
        print(f"{colorize_text('═══ DEATH & PROGRESSION ═══', 'cyan')}")
        print(f"""
{colorize_text('When You Die:', 'red')}
• Lose half your Ashlight (minimum 10 kept)
• Reset to Floor 1, but keep stat upgrades
• EntityAI becomes more adaptive—learns your patterns
• New chapter blueprint generated (different encounters)

{colorize_text('Death Progression:', 'yellow')}
• Deaths 1-5: Entity learns your basic patterns
• Deaths 5-10: Adaptive counters intensify  
• Deaths 10+: Chaos Mode activates
• Hollow class gets -1 all stats after 5 deaths

{colorize_text('Persistence Rewards:', 'green')}
• Skills unlock after certain death counts
• Some NPCs only appear to experienced players
• Hidden lore unlocks with multiple runs
• True understanding comes through repetition

{colorize_text('Entity Commentary:', context='lore')}
{colorize_text('"Death is data; you are the error."', context='lore')}
        """)
    
    def help_advanced(self):
        """Help section: Advanced Tips"""
        print(f"{colorize_text('═══ ADVANCED TIPS ═══', 'cyan')}")
        print(f"""
{colorize_text('Mastering the Entity:', 'yellow')}
• Mix up your action sequences—avoid patterns
• Use different classes to confuse the AI's expectations
• Learn when to be unpredictable vs when to be consistent
• Neural Veil skill is your best friend against adaptation

{colorize_text('NPC Manipulation:', 'yellow')}
• Build trust early, betray strategically if needed
• Understand the ally/enemy web before taking sides
• Some NPCs give better deals when others hate you
• Save betrayals for when you really need the resources

{colorize_text('Combat Mastery:', 'yellow')}
• Read enemy action previews carefully
• Match your response to the threat level shown
• Boss phase transitions are telegraphed—prepare accordingly
• Special abilities can turn the tide in desperate moments

{colorize_text('Meta-Strategy:', 'yellow')}
• The Entity expects you to optimize—sometimes don't
• Deliberate mistakes can throw off its predictions
• Chaos Mode is both curse and opportunity
• Remember: you're not just playing the game, you're playing the AI

{colorize_text('Final Warning:', 'red')}
{colorize_text('The Entity is always watching. Vary your patterns, or become data.', context='lore')}
        """)
        
        print(f"\n{colorize_text('Good luck in the descent, hollow one.', context='lore')}")
        
    def create_character(self):
        """Character creation with class selection"""
        clear_screen()
        
        print(f"{colorize_text('═══ CHARACTER CREATION ═══', 'cyan')}")
        
        name = input(f"{colorize_text('Enter your name:', 'white')} ").strip()
        if not name:
            name = "Hollow One"
            
        print(f"\n{colorize_text('Choose your class:', 'cyan')}")
        classes = [
            ("Warrior", "+3 STR, +2 END - Greatblade Swing"),
            ("Rogue", "+3 DEX, +1 INT - Shadow Stab"),  
            ("Sorcerer", "+3 INT, +1 FTH - Code Bolt"),
            ("Cleric", "+3 FTH, +2 VIT - Ash Heal"),
            ("Knight", "+2 VIT, +2 END - Shield Bash"),
            ("Hollow", "Balanced, -1 all after 5 deaths - Essence Drain")
        ]
        
        for i, (class_name, desc) in enumerate(classes):
            print(f"  {i+1}. {colorize_text(class_name, 'white')}: {desc}")
            
        while True:
            try:
                choice = int(input(f"\n{colorize_text('Select (1-6):', 'white')} ")) - 1
                if 0 <= choice < len(classes):
                    selected_class = classes[choice][0]
                    break
                else:
                    print(f"{colorize_text('Invalid choice.', 'red')}")
            except ValueError:
                print(f"{colorize_text('Please enter a number.', 'red')}")
        
        self.player = Player(name, selected_class)
        
        # Initialize game components
        self.combat = Combat(self.entity_ai)
        self.room_manager = RoomManager(self.entity_ai)
        self.npc_manager = NPCManager(self.entity_ai)
        
        print(f"\n{colorize_text(f'Welcome, {name} the {selected_class}.', 'green')}")
        print(f"{colorize_text('The Entity takes note of your essence...', context='whisper')}")
        
        press_enter_to_continue()
        
    def start_music(self):
        """Initialize background music"""
        print(f"\n{colorize_text('♪ Initializing ambient soundscape...', 'cyan')}")
        music_manager.play_background()
        if music_manager.is_playing:
            print(f"{colorize_text('♪ The Entity\'s hymn begins...', 'cyan')}")
        print()
        
    def main_game_loop(self):
        """Main game loop with EntityAI orchestration"""
        
        # Initialize first floor
        if not self.room_manager.current_floor_rooms:
            layout = self.room_manager.generate_floor_layout(self.player.floor, self.player.state_vector())
            print(f"\n{colorize_text('The Entity shapes your first descent...', 'cyan')}")
            print(f"{layout.get('layout_description', 'Paths twist in digital shadow.')}")
            press_enter_to_continue()
        
        while self.game_active and self.player.health > 0:
            # Update EntityAI with current player state
            player_vector = self.player.apply_neural_veil_noise()
            ui_distortion = self.entity_ai.generate_ui_distort(player_vector)
            ui_distorter.apply_distortion(ui_distortion)
            
            # Mutate game bible based on deaths
            if self.player.deaths > 0:
                self.entity_ai.mutate_game_bible(player_vector)
            
            # Update narrator tone
            import torch
            # Get tone bias from lore generation system
            lore_sample = self.entity_ai.generate_lore(player_vector, self.player.floor, "tone_sample")
            # Use simple bias calculation instead of direct neural network access
            tone_bias = self.entity_ai.calculate_entity_bias(player_vector)
            narrator_filter.update_tone(tone_bias, self.player.get_status_summary())
            
            # Music distortion for low sanity
            music_manager.distort_for_sanity(self.player.sanity)
            
            # Check for floor progression
            if self.current_floor < self.player.floor:
                self.advance_floor()
                
            # Generate whispers
            whisper = self.entity_ai.generate_whisper(player_vector)
            if whisper:
                print(f"\n{narrator_filter.add_whisper(whisper)}")
            
            # Main action menu
            self.show_main_menu()
            
            # Get user action
            action = self.get_player_action()
            if action:
                self.process_action(action)
                
            # Check for ending conditions
            if self.check_ending_conditions():
                break
                
        # Game over
        self.handle_game_over()
        
    def show_main_menu(self):
        """Display main game menu"""
        clear_screen()
        
        # Apply UI distortion to display
        ui_distorter.delay_output()
        
        # Show player status
        status_text = format_stats_display(self.player)
        
        # Apply text distortions
        if self.player.sanity < 30:
            status_text = wobble_text(status_text, 0.2)
        
        status_text = ui_distorter.distort_text(status_text)
        print(status_text)
        
        # Show current location
        location_desc = f"\n{colorize_text(f'Floor {self.player.floor}', 'red')} - {self.get_current_location_desc()}"
        print(narrator_filter.filter_text(location_desc, "location"))
        
    def get_current_location_desc(self) -> str:
        """Get description of current location"""
        floor_descs = {
            1: "Ashen Halls - Cracked vessels stir in digital shadow",
            2: "Code Nexus - Silent kin whisper in fragmented data streams", 
            3: "Hollow Sanctum - The Choir's song echoes through void chambers",
            4: "Grief Depths - Burned watchers judge from crimson terminals",
            5: "Entity Core - The True Form awaits in pure abstraction"
        }
        
        return floor_descs.get(self.player.floor, "Unknown depths...")
        
    def is_safe_zone(self) -> bool:
        """Check if player is in a safe zone (no combat, no immediate danger)"""
        return not self.in_combat and not getattr(self, 'in_dangerous_area', False)
        
    def get_player_action(self) -> Optional[str]:
        """Get player action with context-sensitive UI"""
        safe_zone = self.is_safe_zone()
        
        if safe_zone:
            # Safe zone - no timer, different buttons
            choices = [
                "e - Explore area", 
                "m - Move to new room", 
                "h - Heal", 
                "i - Inventory", 
                "s - Stats & Upgrades", 
                "t - Talk to NPCs",
                "exit - End game gracefully"
            ]
            
            print(f"\n{colorize_text('📍 Safe Zone - What do you do?', 'green')}")
            for choice in choices:
                print(f"  {choice}")
                
            # No time limit in safe zones
            raw_input = input(f"\n{colorize_text('Choose action:', 'white')} ").strip().lower()
            
            # Handle exit in safe zones
            if raw_input == "exit":
                return self.handle_safe_zone_exit()
            
            # Map safe zone inputs to game actions
            input_map = {
                'e': 'a',  # Explore maps to attack/explore
                'm': 'd',  # Move maps to dodge/move
                'h': 'h',  # Heal
                'i': 'i',  # Inventory
                's': 's',  # Stats
                't': 't'   # Talk
            }
            
            return input_map.get(raw_input, raw_input)
        
        else:
            # Combat/danger zone - timed input
            choices = ["a - Attack", "d - Dodge", "h - Emergency Heal", "f - Flee"]
            
            # Apply choice shuffling for danger
            choices = ui_distorter.shuffle_choices(choices)
            
            print(f"\n{colorize_text('⚔️ DANGER - Quick decision needed!', 'red')}")
            for choice in choices:
                print(f"  {choice}")
                
            # Get timed input (varies based on boss aggression)
            time_limit = self.calculate_time_limit()
            raw_input = input_manager.get_timed_input("", [], time_limit)
            
            if raw_input is None:
                return None
                
            # Apply phantom input for dangerous situations
            processed_input = ui_distorter.apply_phantom_input(raw_input)
            
            return processed_input
        
    def calculate_time_limit(self) -> int:
        """Calculate dynamic time limit based on game state"""
        base_time = 8
        
        if self.in_combat:
            # Boss aggression affects timing
            if hasattr(self, 'current_boss') and self.current_boss:
                aggression = getattr(self.current_boss, 'aggression', 0.5)
                base_time = int(base_time * (1.0 - aggression * 0.3))
                
        # Entity bias shortens time
        entity_bias = self.entity_ai.calculate_entity_bias(self.player.state_vector())
        base_time = int(base_time * (1.0 - entity_bias * 0.2))
        
        return max(3, base_time)  # Minimum 3 seconds
    
    def handle_safe_zone_exit(self) -> str:
        """Handle player attempting to exit in safe zone"""
        print(f"\n{colorize_text('You approach the boundary of this realm...', 'cyan')}")
        
        confirm = input(f"{colorize_text('Are you sure you want to end your descent? (yes/no):', 'yellow')} ").strip().lower()
        
        if confirm in ['yes', 'y']:
            clear_screen()
            print(f"\n{create_ascii_border('PEACEFUL DEPARTURE', '═')}")
            print(f"{colorize_text('You step back from the abyss.', 'green')}")
            print(f"{colorize_text('The Entity allows your departure... for now.', context='whisper')}")
            
            # Show basic stats only
            print(f"\n{colorize_text('Session Summary:', 'cyan')}")
            print(f"Floor Reached: {colorize_text(f'{self.player.floor}', 'yellow')}")
            print(f"Deaths: {colorize_text(str(self.player.deaths), 'red')}")
            print(f"Time in Descent: Brief")
            
            print(f"\n{colorize_text('Thank you for playing Terminal Souls.', 'white')}")
            print(f"{colorize_text('The Entity will remember your patterns...', context='lore')}")
            
            self.game_active = False
            return "exit_game"
        else:
            print(f"{colorize_text('You step back from the edge.', 'white')}")
            return None
        
    def process_action(self, action: str):
        """Process player action and update metrics"""
        action = action.lower().strip()
        
        # Update player predictability
        self.player.update_predictability(action)
        
        if action == 'a':  # Attack/Explore  
            if self.in_combat:
                self.combat.player_attack(self.player)
                self.in_dangerous_area = True  # Mark as dangerous after combat
            else:
                self.explore_current_area()
                
        elif action == 'd':  # Dodge/Move
            if self.in_combat:
                self.combat.player_dodge(self.player)
            else:
                self.move_to_new_room()
                self.in_dangerous_area = False  # Moving to new room is safe
                
        elif action == 'h':  # Heal
            self.use_healing_item()
            
        elif action == 'f':  # Flee
            self.attempt_flee()
            
        elif action == 'i':  # Inventory
            self.show_inventory()
            
        elif action == 's':  # Stats
            self.show_detailed_stats()
            
        elif action == 't':  # Talk
            self.attempt_npc_interaction()
            
        elif action == 'exit':
            # Handle exit attempts
            self.handle_exit_attempt()
            
        elif action == 'exit_game':
            # Graceful exit from safe zones
            return
            
        elif action == 'test' and self.player.health == self.player.max_health:
            # Hidden test command to take damage for testing healing
            test_damage = 30
            self.player.take_damage(test_damage)
            print(f"{colorize_text(f'[TEST] Took {test_damage} damage for healing testing', 'yellow')}")
            
        else:
            print(f"{colorize_text('Invalid action.', 'red')}")
    
    def handle_exit_attempt(self):
        """Handle exit attempt - different behavior for safe vs hostile zones"""
        if self.is_safe_zone():
            # This should have been handled in get_player_action already
            result = self.handle_safe_zone_exit()
            if result == "exit_game":
                self.game_active = False
        else:
            # Hostile zone - Entity denies exit
            entity_responses = [
                "The Entity laughs—Did you think escape was yours to command?",
                "The descent binds you—no escape here.",
                "Exit? The void has other plans for you.",
                "Your patterns are not yet fully compiled. Continue.",
                "The Entity's grip tightens. There is only descent."
            ]
            
            response = random.choice(entity_responses)
            print(f"\n{colorize_text(response, context='whisper')}")
            
            # Apply minor sanity loss for trying to escape
            self.player.sanity = max(0, self.player.sanity - 1)
            
            press_enter_to_continue()
            
    def explore_current_area(self):
        """Explore current area - may trigger encounters"""
        self.player.explore_room()
        
        print(f"\n{colorize_text('Exploring...', 'cyan')}")
        
        # Use room manager for proper exploration
        if self.room_manager and self.room_manager.current_floor_rooms:
            search_result = self.room_manager.search_current_room(self.player)
            if search_result.get("message"):
                print(search_result["message"])
                
            # Handle items found
            for item in search_result.get("items", []):
                self.player.inventory.append(item)
                music_manager.play_sound_effect("notification")
                print(f"\n{colorize_text('🎒 ITEM DISCOVERED:', 'yellow')}")
                print(f"Found: {colorize_text(item['name'], 'yellow')}")
                print(f"Added to inventory!")
                
            # Handle ashlight found
            if search_result.get("ashlight", 0) > 0:
                ashlight_found = search_result["ashlight"]
                self.player.ashlight += ashlight_found
                music_manager.play_sound_effect("notification")
                print(f"\n{colorize_text('✨ ASHLIGHT DISCOVERED:', 'yellow')}")
                print(f"Found: {colorize_text(f'{ashlight_found} shards', 'yellow')}")
                print(f"Total: {colorize_text(str(self.player.ashlight), 'yellow')} shards")
                
            # Handle lore found
            if search_result.get("lore"):
                print(f"\n{colorize_text('Lore Fragment:', context='lore')}")
                print(f"{colorize_text(search_result['lore'], context='lore')}")
                
            # Handle traps
            if "trap" in search_result:
                print(f"\n{colorize_text('Trap triggered during exploration!', 'red')}")
                
        # Random encounter chance
        encounter_chance = 0.3 + (self.player.floor * 0.1)
        
        if random.random() < encounter_chance:
            # Generate mob encounter
            player_vector = self.player.state_vector()
            mob = self.entity_ai.generate_mob(player_vector, self.player.floor)
            print(f"\n{colorize_text('A ' + mob['name'] + ' emerges!', 'red')}")
            self.start_combat(mob)
        else:
            # Safe exploration - minor rewards
            self.handle_safe_exploration()
            
        # Check for floor progression
        progress = self.room_manager.get_floor_progress()
        if progress["completion"] > 0.7 and not self.floor_boss_defeated:
            print(f"\n{colorize_text('You sense the floor\'s heart beating nearby...', 'red')}")
        elif progress["visited"] >= progress["total"] - 1:
            # Time to advance floors
            self.player.floor += 1
            print(f"\n{colorize_text('The descent continues deeper...', 'cyan')}")
                
    def start_combat(self, enemy: Dict[str, Any]):
        """Start combat encounter"""
        self.in_combat = True
        result = self.combat.start_encounter(self.player, enemy)
        self.in_combat = False
        
        if result == "victory":
            self.player.kill_mob(enemy["name"])
            music_manager.play_sound_effect("victory")
            print(f"{colorize_text('Victory!', 'green')}")
            # Loot and experience
            self.handle_combat_victory(enemy)
        elif result == "fled":
            print(f"{colorize_text('You escaped the encounter.', 'yellow')}")
        else:
            # Player died in combat - death sound already played in player.die()
            self.player.die()
            
    def trigger_trap(self, trap: Dict[str, Any]):
        """Trigger a generated trap"""
        print(f"\n{colorize_text('TRAP TRIGGERED!', 'red')}")
        print(f"{colorize_text(trap['type'].upper(), 'red')}: {trap['effect']}")
        
        # Apply trap effects
        if trap["type"] == "poison_mist":
            self.player.sanity = max(0, self.player.sanity - trap["severity"])
            print(f"{colorize_text('Sanity drain...', 'magenta')}")
            
        elif trap["type"] == "ambush_spawn":
            print(f"{colorize_text('Enemies spawn from the shadows!', 'red')}")
            for _ in range(trap["severity"]):
                mob = self.entity_ai.generate_mob(self.player.state_vector(), self.player.floor)
                self.start_combat(mob)
                if self.player.health <= 0:
                    break
                    
        elif trap["type"] == "void_drain":
            stamina_drain = trap["severity"] * 2
            self.player.stamina = max(0, self.player.stamina - stamina_drain)
            whisper = self.entity_ai.generate_whisper(self.player.state_vector(), "trap")
            if whisper:
                print(f"{narrator_filter.add_whisper('Weakness... delicious.')}")
                
    def handle_safe_exploration(self):
        """Handle safe exploration results"""
        outcomes = [
            "You find a few shards of Ashlight.",
            "Ancient code fragments whisper secrets.",
            "A moment of peace in the digital abyss.",
            "The shadows seem less oppressive here."
        ]
        
        outcome = random.choice(outcomes)
        print(f"\n{narrator_filter.filter_text(outcome, 'exploration')}")
        
        # Small reward
        ashlight_gain = random.randint(1, 3)
        self.player.ashlight += ashlight_gain
        
    def handle_combat_victory(self, enemy: Dict[str, Any]):
        """Handle post-combat rewards"""
        # Ashlight reward
        ashlight_reward = random.randint(5, 15) + self.player.floor
        self.player.ashlight += ashlight_reward
        
        music_manager.play_sound_effect("notification")
        print(f"Gained {colorize_text(str(ashlight_reward), 'yellow')} Ashlight")
        
        # Possible item drop
        if random.random() < 0.3:
            item = self.entity_ai.generate_item(self.player.state_vector(), self.player.floor)
            self.player.inventory.append(item)
            music_manager.play_sound_effect("notification")
            print(f"Found: {colorize_text(item['name'], 'yellow')}")
            
    def use_healing_item(self):
        """Use healing item or ability"""
        
        # Simple heal for now - can be expanded
        heal_cost = 5
        
        print(f"\n{colorize_text('Attempting to heal...', 'cyan')}")
        print(f"Current Health: {colorize_text(f'{self.player.health}/{self.player.max_health}', 'white')}")
        print(f"Heal Cost: {colorize_text(f'{heal_cost} Ashlight', 'yellow')}")
        
        if self.player.health >= self.player.max_health:
            print(f"{colorize_text('You are already at full health!', 'green')}")
        elif self.player.ashlight >= heal_cost:
            old_health = self.player.health
            self.player.ashlight -= heal_cost
            heal_amount = 20 + self.player.stats["vit"]
            self.player.heal(heal_amount)
            actual_heal = self.player.health - old_health
            print(f"{colorize_text(f'Healed for {actual_heal} HP ({old_health} → {self.player.health})', 'green')}")
            print(f"Ashlight remaining: {colorize_text(str(self.player.ashlight), 'yellow')}")
        else:
            print(f"{colorize_text(f'Not enough Ashlight to heal. Need {heal_cost}, have {self.player.ashlight}.', 'red')}")
            
        press_enter_to_continue()
            
    def attempt_flee(self):
        """Attempt to flee current situation"""
        if self.in_combat:
            if random.random() < 0.7:  # 70% flee success
                self.player.flee_encounter()
                self.in_combat = False
                print(f"{colorize_text('You escaped!', 'yellow')}")
            else:
                print(f"{colorize_text('Cannot escape!', 'red')}")
        else:
            print(f"{colorize_text('Nothing to flee from.', 'white')}")
            
    def show_inventory(self):
        """Show interactive inventory with item details"""
        clear_screen()
        print(f"{colorize_text('═══ INVENTORY MANAGEMENT ═══', 'cyan')}")
        
        if not self.player.inventory:
            print(f"{colorize_text('Your inventory is empty.', 'white')}")
            print(f"{colorize_text('Explore to find items!', 'yellow')}")
            press_enter_to_continue()
            return
        
        # Show current equipment
        if self.player.equipped_weapon:
            print(f"Equipped: {colorize_text(self.player.equipped_weapon['name'], 'green')}")
        else:
            print(f"Equipped: {colorize_text('None', 'white')}")
            
        print(f"\nInventory Items:")
        for i, item in enumerate(self.player.inventory):
            print(f"  {i+1}. {colorize_text(item['name'], 'yellow')}")
        print(f"  0. Return to game")
        
        try:
            choice = input(f"\n{colorize_text('Examine item (0-{len(self.player.inventory)}):', 'white')} ").strip()
            
            if choice == '0':
                return
                
            item_index = int(choice) - 1
            if 0 <= item_index < len(self.player.inventory):
                item = self.player.inventory[item_index]
                self.show_item_details(item, item_index)
            else:
                print(f"{colorize_text('Invalid choice.', 'red')}")
                press_enter_to_continue()
                
        except ValueError:
            print(f"{colorize_text('Please enter a number.', 'red')}")
            press_enter_to_continue()
        
    def show_detailed_stats(self):
        """Show detailed player statistics with upgrade options"""
        clear_screen()
        status = self.player.get_status_summary()
        
        print(f"{colorize_text('═══ CHARACTER PROGRESSION ═══', 'cyan')}")
        print(format_stats_display(self.player))
        
        # Show hidden metrics if sanity is low
        if self.player.sanity < 60:
            print(f"\n{colorize_text('═══ ENTITY ANALYSIS ═══', 'red')}")
            print(f"Predictability: {colorize_text(status['predictability'], 'red')}")
            print(f"Sanity: {colorize_text(status['sanity'], 'red')}")
        
        # Show upgrade options
        self.show_stat_upgrade_menu()
        
    def show_stat_upgrade_menu(self):
        """Allow players to upgrade stats with Souls-like scaling"""
        print(f"\n{colorize_text('═══ SOULS-LIKE STAT UPGRADES ═══', 'yellow')}")
        print(f"Available Ashlight: {colorize_text(str(self.player.ashlight), 'yellow')} shards")
        
        # Calculate costs with souls-like scaling
        stats = ["str", "dex", "int", "fth", "end", "vit"]
        costs = {}
        
        print(f"\n{colorize_text('Upgrade Options (costs increase with level):', 'cyan')}")
        
        for i, stat in enumerate(stats):
            current_value = self.player.stats[stat]
            # Souls-like scaling: cost increases quadratically after base 10
            if current_value <= 10:
                cost = 10
            elif current_value <= 20:
                cost = 15 + (current_value - 10) * 2
            elif current_value <= 30:
                cost = 35 + (current_value - 20) * 5
            else:
                cost = 85 + (current_value - 30) * 10  # Expensive high-level scaling
                
            costs[stat] = cost
            
            # Show the upgrade with stat impacts
            impact_desc = self.get_stat_impact_description(stat, current_value)
            affordability = colorize_text(f'{cost} shards', 'green' if self.player.ashlight >= cost else 'red')
            
            print(f"  {i+1}. {stat.upper()}: {colorize_text(str(current_value), 'white')} → {colorize_text(str(current_value + 1), 'green')} ({affordability})")
            print(f"      {colorize_text(impact_desc, 'yellow')}")
            
        print(f"  0. {colorize_text('Return to game', 'white')}")
        
        # Show Entity's warning about stat growth
        if any(self.player.stats[stat] > 15 for stat in stats):
            entity_warning = self.entity_ai.generate_lore(
                self.player.state_vector(),
                self.player.floor,
                "high_stats_warning"
            )
            print(f"\n{colorize_text('Entity Warning:', 'red')}")
            print(f"{colorize_text(entity_warning, context='lore')}")
        
        try:
            choice = input(f"\n{colorize_text('Upgrade stat (0-6):', 'white')} ").strip()
            
            if choice == '0':
                return
                
            stat_index = int(choice) - 1
            if 0 <= stat_index < len(stats):
                stat_name = stats[stat_index]
                cost = costs[stat_name]
                
                if self.player.ashlight >= cost:
                    # Confirm expensive upgrades
                    if cost > 50:
                        confirm = input(f"{colorize_text(f'This upgrade costs {cost} shards. Confirm? (y/n):', 'yellow')} ").strip().lower()
                        if confirm not in ['y', 'yes']:
                            print(f"{colorize_text('Upgrade cancelled.', 'white')}")
                            return
                    
                    # Apply the upgrade
                    self.player.ashlight -= cost
                    old_value = self.player.stats[stat_name]
                    self.player.stats[stat_name] += 1
                    
                    # Play stat upgrade sound
                    music_manager.play_sound_effect("stat")
                    
                    # Update derived stats with better scaling
                    self.update_derived_stats(stat_name, old_value)
                    
                    print(f"\n{colorize_text(f'{stat_name.upper()} increased: {old_value} → {self.player.stats[stat_name]}!', 'green')}")
                    print(f"Cost: {colorize_text(str(cost), 'red')} shards")
                    print(f"Remaining: {colorize_text(str(self.player.ashlight), 'yellow')} shards")
                    
                    # Show Entity adaptive response
                    if self.player.stats[stat_name] > 20:
                        adaptation = self.entity_ai.generate_lore(
                            self.player.state_vector(),
                            self.player.floor,
                            f"high_{stat_name}_adaptation"
                        )
                        print(f"\n{colorize_text('The Entity adapts...', 'red')}")
                        print(f"{colorize_text(adaptation, context='lore')}")
                        
                else:
                    print(f"{colorize_text(f'Not enough Ashlight! Need {cost}, have {self.player.ashlight}.', 'red')}")
            else:
                print(f"{colorize_text('Invalid choice.', 'red')}")
                
        except ValueError:
            print(f"{colorize_text('Please enter a number.', 'red')}")
            
        press_enter_to_continue()
    
    def get_stat_impact_description(self, stat: str, current_value: int) -> str:
        """Get description of what upgrading this stat will do"""
        descriptions = {
            "str": f"Melee damage +{2 + current_value//5} → Entity spawns armored counters",
            "dex": f"Dodge +{1 + current_value//10}%, accuracy +{1}% → Feinting enemies increase",  
            "int": f"Magic damage +{3 + current_value//3} → Anti-magic fields strengthen",
            "fth": f"Divine power +{2 + current_value//4}, resist +{1}% → Faith corruption grows",
            "end": f"Stamina +{5 + current_value//2}, heal cost -{1}% → Drain attacks intensify",
            "vit": f"HP +{8 + current_value//3}, defense +{1} → Poison/DoT effects worsen"
        }
        
        return descriptions.get(stat, "Unknown effect")
    
    def update_derived_stats(self, stat_name: str, old_value: int):
        """Update derived stats with proper scaling"""
        if stat_name == "vit":
            # HP scaling: base 10 per point, but with diminishing returns after 20
            old_hp_bonus = self.calculate_hp_bonus(old_value)
            new_hp_bonus = self.calculate_hp_bonus(self.player.stats["vit"])
            hp_gain = new_hp_bonus - old_hp_bonus
            
            self.player.max_health += hp_gain
            self.player.health += hp_gain  # Also increase current HP
            print(f"Max HP increased by {colorize_text(str(hp_gain), 'green')}")
            
        elif stat_name == "end":
            # Stamina scaling: base 5 per point, bonus at higher levels
            old_stamina_bonus = self.calculate_stamina_bonus(old_value)
            new_stamina_bonus = self.calculate_stamina_bonus(self.player.stats["end"])
            stamina_gain = new_stamina_bonus - old_stamina_bonus
            
            self.player.max_stamina += stamina_gain
            self.player.stamina += stamina_gain
            print(f"Max Stamina increased by {colorize_text(str(stamina_gain), 'green')}")
    
    def calculate_hp_bonus(self, vit_value: int) -> int:
        """Calculate HP bonus from VIT with diminishing returns"""
        if vit_value <= 20:
            return vit_value * 8
        elif vit_value <= 30:
            return 160 + (vit_value - 20) * 5  # Diminishing returns
        else:
            return 210 + (vit_value - 30) * 3  # Even more diminishing returns
    
    def calculate_stamina_bonus(self, end_value: int) -> int:
        """Calculate stamina bonus from END"""
        if end_value <= 15:
            return end_value * 5
        elif end_value <= 25:
            return 75 + (end_value - 15) * 4
        else:
            return 115 + (end_value - 25) * 3
        
    def show_item_details(self, item: Dict[str, Any], item_index: int):
        """Show detailed item information and equip options"""
        clear_screen()
        print(f"{colorize_text('═══ ITEM DETAILS ═══', 'yellow')}")
        
        print(f"\n{colorize_text(item['name'], 'yellow')}")
        
        # Show item stats
        print(f"\n{colorize_text('Stats:', 'white')}")
        stats = item.get('stats', {})
        for stat_name, stat_value in stats.items():
            if stat_name == 'damage' and stat_value > 0:
                print(f"  Damage: {colorize_text(f'+{stat_value}', 'red')}")
            elif stat_name == 'defense' and stat_value > 0:
                print(f"  Defense: {colorize_text(f'+{stat_value}', 'green')}")
            elif stat_name == 'effect' and stat_value > 0:
                print(f"  Special Effect: {colorize_text(f'+{stat_value}', 'cyan')}")
            elif stat_name == 'rarity':
                rarity_names = ["Common", "Uncommon", "Rare", "Epic"]
                rarity_name = rarity_names[min(stat_value, len(rarity_names) - 1)]
                print(f"  Rarity: {colorize_text(rarity_name, 'magenta')}")
                
        # Show curse risk if present
        if item.get('curse_risk', 0) > 0:
            curse_risk = item['curse_risk']
            print(f"  {colorize_text(f'Curse Risk: {curse_risk:.1%}', 'red')}")
            
        # Show equip options
        print(f"\n{colorize_text('Actions:', 'cyan')}")
        
        if item.get('stats', {}).get('damage', 0) > 0:
            # Weapon
            if self.player.equipped_weapon and self.player.equipped_weapon == item:
                print(f"  1. {colorize_text('Unequip', 'red')}")
            else:
                print(f"  1. {colorize_text('Equip as weapon', 'green')}")
        else:
            print(f"  1. {colorize_text('Use/Consume', 'green')}")
            
        print(f"  2. {colorize_text('Drop item', 'red')}")
        print(f"  0. {colorize_text('Back to inventory', 'white')}")
        
        try:
            action = input(f"\n{colorize_text('Choose action:', 'white')} ").strip()
            
            if action == '0':
                self.show_inventory()  # Go back to inventory
            elif action == '1':
                self.handle_item_action(item, item_index, "primary")
            elif action == '2':
                self.handle_item_drop(item, item_index)
            else:
                print(f"{colorize_text('Invalid choice.', 'red')}")
                press_enter_to_continue()
                self.show_item_details(item, item_index)  # Return to item details
                
        except ValueError:
            print(f"{colorize_text('Please enter a number.', 'red')}")
            press_enter_to_continue()
            self.show_item_details(item, item_index)
            
    def handle_item_action(self, item: Dict[str, Any], item_index: int, action_type: str):
        """Handle equipping or using items"""
        if item.get('stats', {}).get('damage', 0) > 0:
            # Weapon equipping
            if self.player.equipped_weapon == item:
                # Unequip
                self.player.equipped_weapon = None
                print(f"\n{colorize_text('Unequipped ' + item['name'], 'yellow')}")
            else:
                # Equip weapon
                if self.player.equipped_weapon:
                    print(f"Replacing {colorize_text(self.player.equipped_weapon['name'], 'yellow')}")
                self.player.equipped_weapon = item
                music_manager.play_sound_effect("notification")
                print(f"\n{colorize_text('Equipped ' + item['name'] + '!', 'green')}")
        else:
            # Consumable item
            self.use_consumable_item(item, item_index)
            
        press_enter_to_continue()
        
    def handle_item_drop(self, item: Dict[str, Any], item_index: int):
        """Handle dropping items"""
        print(f"\n{colorize_text('Dropped ' + item['name'], 'red')}")
        
        # Remove from inventory
        if 0 <= item_index < len(self.player.inventory):
            dropped_item = self.player.inventory.pop(item_index)
            
            # Unequip if it was equipped
            if self.player.equipped_weapon == dropped_item:
                self.player.equipped_weapon = None
                print(f"{colorize_text('Weapon unequipped.', 'yellow')}")
                
        press_enter_to_continue()
        
    def use_consumable_item(self, item: Dict[str, Any], item_index: int):
        """Use consumable items"""
        # Basic consumable effects
        stats = item.get('stats', {})
        
        if stats.get('effect', 0) > 0:
            # Healing effect
            heal_amount = stats['effect'] * 5
            self.player.heal(heal_amount)
            print(f"\n{colorize_text('Used ' + item['name'] + f' - Healed {heal_amount} HP!', 'green')}")
            
            # Remove from inventory
            self.player.inventory.pop(item_index)
        else:
            print(f"\n{colorize_text('This item cannot be consumed.', 'yellow')}")
        
    def move_to_new_room(self):
        """Move to a new room/area"""
        print(f"\n{colorize_text('Moving to a new area...', 'cyan')}")
        
        if not self.room_manager:
            print(f"{colorize_text('Nowhere to move.', 'white')}")
            return
            
        # Generate floor layout if not already done
        if not self.room_manager.current_floor_rooms:
            print(f"{colorize_text('Generating floor layout...', 'yellow')}")
            layout = self.room_manager.generate_floor_layout(self.player.floor, self.player.state_vector())
            print(f"\n{colorize_text('Floor layout generated:', 'cyan')}")
            print(f"{layout.get('layout_description', 'The Entity shapes your path...')}")
            
        # Try to move forward
        result = self.room_manager.move_player("forward", self.player)
        print(f"\n{result}")
        
        # Check if we've reached boss room
        if self.room_manager.is_boss_room():
            print(f"\n{colorize_text('You sense a powerful presence ahead...', 'red')}")
        
        # Force a potential encounter in the new area
        if random.random() < 0.4:  # 40% chance
            print(f"\n{colorize_text('Something stirs in this new area...', 'yellow')}")
            self.trigger_area_encounter()
        else:
            print(f"\n{colorize_text('The new area seems quiet... for now.', 'white')}")
    
    def trigger_area_encounter(self):
        """Trigger an encounter when moving to new areas"""
        encounter_types = ["mob", "loot", "trap", "nothing"]
        weights = [0.5, 0.2, 0.2, 0.1]  # 50% mob, 20% loot, 20% trap, 10% nothing
        
        encounter = random.choices(encounter_types, weights=weights)[0]
        
        if encounter == "mob":
            player_vector = self.player.state_vector()
            mob = self.entity_ai.generate_mob(player_vector, self.player.floor)
            print(f"\n{colorize_text('A ' + mob['name'] + ' blocks your path!', 'red')}")
            self.start_combat(mob)
        elif encounter == "loot":
            item = self.entity_ai.generate_item(self.player.state_vector(), self.player.floor)
            ashlight_gain = random.randint(5, 15)
            
            self.player.inventory.append(item)
            self.player.ashlight += ashlight_gain
            
            print(f"\n{colorize_text('You discover hidden treasures!', 'yellow')}")
            print(f"Found: {colorize_text(item['name'], 'yellow')}")
            print(f"Gained: {colorize_text(f'{ashlight_gain} Ashlight', 'yellow')}")
        elif encounter == "trap":
            trap = self.entity_ai.generate_trap(self.player.state_vector(), self.player.floor)
            print(f"\n{colorize_text('TRAP TRIGGERED!', 'red')}")
            print(f"{colorize_text(trap['type'].upper().replace('_', ' '), 'red')}")
            print(f"{trap['effect']}")
            
            # Apply trap effects based on type
            if trap["type"] == "poison_mist":
                poison_damage = trap["severity"] * 3
                self.player.take_damage(poison_damage)
                self.player.sanity = max(0, self.player.sanity - trap["severity"])
            elif trap["type"] == "void_drain":
                stamina_drain = trap["severity"] * 2
                self.player.stamina = max(0, self.player.stamina - stamina_drain)
                print(f"{colorize_text(f'Stamina drained by {stamina_drain}!', 'red')}")
            elif trap["type"] == "phantom_pain":
                phantom_damage = trap["severity"] * 5
                self.player.sanity = max(0, self.player.sanity - 1)
                print(f"{colorize_text(f'You feel {phantom_damage} damage but take none... reality blurs.', 'magenta')}")
        # "nothing" case - already handled by outer function
            
    def attempt_npc_interaction(self):
        """Attempt to interact with NPCs"""
        
        print(f"\n{colorize_text('Looking for someone to talk to...', 'cyan')}")
        
        # Check if NPC is present
        available_npcs = self.npc_manager.get_available_npcs(self.player.floor)
        
        if not available_npcs:
            print(f"{colorize_text('The shadows are empty. No one to talk to here.', 'white')}")
            print(f"{colorize_text('(NPCs may appear in different rooms or floors)', 'yellow')}")
            press_enter_to_continue()
            return
            
        # Show available NPCs
        print(f"\n{colorize_text('You sense presences nearby:', 'green')}")
        for i, npc in enumerate(available_npcs):
            print(f"  {colorize_text(str(i+1), 'cyan')}. {colorize_text(npc, 'green')}")
        print(f"  {colorize_text('0', 'cyan')}. {colorize_text('Leave', 'white')}")
            
        try:
            choice_input = input(f"\n{colorize_text('Talk to (number):', 'white')} ").strip()
            
            if choice_input == '0':
                print(f"{colorize_text('You step back into the shadows.', 'white')}")
                press_enter_to_continue()
                return
                
            choice = int(choice_input) - 1
            if 0 <= choice < len(available_npcs):
                npc_name = available_npcs[choice]
                print(f"\n{colorize_text(f'Approaching {npc_name}...', 'green')}")
                
                # Show NPC greeting first
                self.npc_manager.interact(self.player, npc_name, "greeting")
                
                # Then offer interaction options
                self.show_npc_interaction_menu(npc_name)
                press_enter_to_continue()
            else:
                print(f"{colorize_text('Invalid choice. No one by that number.', 'red')}")
                press_enter_to_continue()
        except (ValueError, IndexError):
            print(f"{colorize_text('Invalid input. Please enter a number.', 'red')}")
            press_enter_to_continue()
    
    def show_npc_interaction_menu(self, npc_name: str):
        """Show interaction options for specific NPC"""
        print(f"\n{colorize_text('What would you like to do?', 'cyan')}")
        
        options = []
        
        if npc_name == "Faceless Merchant":
            options = [
                ("1", "Trade", "Browse and buy items"),
                ("2", "Help", "Assist the merchant"),
                ("3", "Betray", "Attack and rob them"),
                ("0", "Leave", "End conversation")
            ]
        elif npc_name == "Blacktongue":
            options = [
                ("1", "Enhance Weapons", "Upgrade your equipment"),
                ("2", "Help", "Assist the blacksmith"),
                ("3", "Betray", "Attack and rob them"),
                ("0", "Leave", "End conversation")
            ]
        elif npc_name == "Still Flame Warden":
            options = [
                ("1", "Train Skills", "Learn new abilities"),
                ("2", "Help", "Assist the warden"),
                ("3", "Betray", "Attack and rob them"),
                ("0", "Leave", "End conversation")
            ]
        else:
            # Default options for other NPCs
            options = [
                ("1", "Help", "Offer assistance"),
                ("2", "Chat", "Continue conversation"),
                ("3", "Betray", "Attack them"),
                ("0", "Leave", "End conversation")
            ]
        
        for key, action, description in options:
            print(f"  {colorize_text(key, 'cyan')} - {colorize_text(action, 'white')}: {description}")
        
        try:
            choice = input(f"\n{colorize_text('Choose action:', 'white')} ").strip()
            
            if choice == "0":
                print(f"{colorize_text('You step away from the conversation.', 'white')}")
                return
            elif choice == "1":
                if npc_name == "Faceless Merchant":
                    self.npc_manager.interact(self.player, npc_name, "trade")
                elif npc_name == "Blacktongue":
                    self.npc_manager.interact(self.player, npc_name, "trade")
                elif npc_name == "Still Flame Warden":
                    self.npc_manager.interact(self.player, npc_name, "trade")
                else:
                    self.npc_manager.interact(self.player, npc_name, "help")
            elif choice == "2":
                if npc_name in ["Faceless Merchant", "Blacktongue", "Still Flame Warden"]:
                    self.npc_manager.interact(self.player, npc_name, "help")
                else:
                    self.npc_manager.interact(self.player, npc_name, "greeting")
            elif choice == "3":
                print(f"\n{colorize_text('Are you sure you want to betray this NPC? This will have permanent consequences!', 'red')}")
                confirm = input(f"{colorize_text('Type YES to confirm betrayal:', 'red')} ").strip()
                if confirm.upper() == "YES":
                    self.npc_manager.interact(self.player, npc_name, "betray")
                else:
                    print(f"{colorize_text('Betrayal cancelled.', 'white')}")
            else:
                print(f"{colorize_text('Invalid choice.', 'red')}")
                
        except (ValueError, KeyboardInterrupt):
            print(f"{colorize_text('Conversation interrupted.', 'white')}")
            
    def advance_floor(self):
        """Advance to next floor"""
        self.current_floor = self.player.floor
        self.floor_boss_defeated = False
        
        clear_screen()
        print(f"\n{create_ascii_border(f'FLOOR {self.current_floor}')}")
        
        # Generate new floor layout
        layout = self.room_manager.generate_floor_layout(self.current_floor, self.player.state_vector())
        
        # Generate floor-specific lore
        floor_lore = self.entity_ai.generate_lore(
            self.player.state_vector(), 
            self.current_floor, 
            f"floor_{self.current_floor}"
        )
        
        print(f"\n{colorize_text(floor_lore, context='lore')}")
        print(f"\n{layout.get('layout_description', 'The Entity reshapes reality around you.')}")
        
        # Check for boss encounter
        if self.should_spawn_boss():
            self.trigger_boss_encounter()
            
        press_enter_to_continue()
        
    def should_spawn_boss(self) -> bool:
        """Determine if boss should spawn"""
        # Bosses on floors 2, 4, 5 (mandatory) and 1, 3 (optional)
        mandatory_floors = [2, 4, 5]
        optional_floors = [1, 3]
        
        if self.current_floor in mandatory_floors:
            return True
        elif self.current_floor in optional_floors:
            return random.random() < 0.6  # 60% chance
            
        return False
        
    def trigger_boss_encounter(self):
        """Trigger boss fight"""
        boss = self.entity_ai.generate_boss(self.player.state_vector(), self.current_floor)
        
        print(f"\n{colorize_text('BOSS ENCOUNTER!', 'red')}")
        print(f"{colorize_text(boss['name'], context='boss')}")
        
        # Boss-specific intro lore
        boss_lore = self.entity_ai.generate_lore(
            self.player.state_vector(),
            self.current_floor,
            f"boss_{boss['name']}"
        )
        print(f"\n{colorize_text(boss_lore, context='lore')}")
        
        # Set current boss for dynamic timing
        self.current_boss = boss
        
        # Start boss combat
        self.start_combat(boss)
        
        if self.player.health > 0:
            self.floor_boss_defeated = True
            music_manager.play_sound_effect("victory")  # Boss victory sound
            print(f"\n{colorize_text('BOSS DEFEATED!', 'green')}")
            
            # Major rewards
            ashlight_reward = 50 + (self.current_floor * 10)
            self.player.ashlight += ashlight_reward
            self.player.skill_points += 1
            
            music_manager.play_sound_effect("stat")  # Reward gain sound
            print(f"Gained {ashlight_reward} Ashlight and 1 Skill Point!")
            
    def check_ending_conditions(self) -> bool:
        """Check if game should end"""
        # Sanity 0 forces Broken Mind ending
        if self.player.sanity <= 0:
            self.ending_type = "Broken Mind"
            return True
            
        # Reached floor 5 and defeated Entity
        if self.current_floor >= 5 and self.floor_boss_defeated:
            self.determine_ending()
            return True
            
        return False
        
    def determine_ending(self):
        """Determine which ending the player gets"""
        metrics = self.player.get_ending_metrics()
        
        # Ending logic based on player metrics
        if metrics["predictability"] < 0.4 and metrics["sanity"] > 70:
            self.ending_type = "True Flame"
        elif metrics["predictability"] > 0.8 and metrics["ally_count"] <= 0:
            self.ending_type = "Compiled Husk"  
        elif metrics["betrayals"] > 2:
            self.ending_type = "Ash Betrayal"
        elif metrics["ally_count"] >= 4:
            self.ending_type = "False Salvation"
        elif metrics["deaths"] <= 1 and metrics["predictability"] < 0.6:
            self.ending_type = "Eternal Loop"
        else:
            self.ending_type = "Compiled Husk"  # Default
            
    def handle_game_over(self):
        """Handle game over sequence - only for actual game endings"""
        # Don't show full ending for safe zone exits
        if not self.game_active and not hasattr(self, 'ending_type'):
            return
            
        clear_screen()
        
        # Generate psychological profile
        profile = self.entity_ai.generate_psychological_profile(
            self.player.state_vector(),
            self.player.get_ending_metrics()
        )
        
        # Show ending
        ending_screen = format_ending_screen(
            getattr(self, 'ending_type', 'Compiled Husk'),
            profile,
            self.player.get_ending_metrics()
        )
        
        print(ending_screen)
        
        # Save whisper archive
        save_whisper_archive(self.entity_ai.whisper_archive)
        
        press_enter_to_continue("Press Enter to return to the abyss...")
        
    def run(self):
        """Main game entry point"""
        try:
            self.show_intro()
            self.create_character() 
            self.start_music()
            self.main_game_loop()
        except KeyboardInterrupt:
            print(f"\n\n{colorize_text('The Entity releases you... for now.', context='whisper')}")
        except Exception as e:
            print(f"\n{colorize_text(f'ERROR: {str(e)}', 'red')}")
            print(f"{colorize_text('The code bleeds. The Entity laughs.', context='whisper')}")
        finally:
            # Cleanup
            if hasattr(self, 'entity_ai'):
                save_whisper_archive(self.entity_ai.whisper_archive)

if __name__ == "__main__":
    import torch  # Import here to ensure it's available
    game = Game()
    game.run()
